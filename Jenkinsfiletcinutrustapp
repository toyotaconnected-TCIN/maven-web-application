pipeline{
    agent any
    stages{
        stage('Git Checkout'){
            steps{
                git branch: 'development', credentialsId: 'GitHub_Credential', url: 'https://github.com/toyotaconnected-TCIN/maven-web-application.git'
            }
        }
        stage('mavenBuild'){
            steps{
                script{
                    sh 'mvn clean package'
                }
            }
        }
        stage('static code analysis'){
            steps{
                script{
                    withSonarQubeEnv(credentialsId: 'SonarQube_Token'){
                        sh 'mvn clean package sonar:sonar'
                    }
                    
                }
            }

        }
        stage('Quality gate status'){
            steps{
                script{
                        waitForQualityGate abortPipeline: false, credentialsId: 'SonarQube_Token'
                }
            }
        }
        stage('Upload artifact into Nexus Repo'){
            steps{
                script{
                    def readPomVersion = readMavenPom file: 'pom.xml'

                    def nexusRepo = readPomVersion.version.endsWith("SNAPSHOT") ? "TCIN-Utrust-snapshot" : "TCIN-Utrust-release"

                    nexusArtifactUploader artifacts:
                    [
                        [
                            artifactId: 'maven-web-application', 
                            classifier: '', 
                            file: 'target/maven-web-application.war', 
                            type: 'war'
                            ]
                    ], 
                    credentialsId: 'Nexus_credentials',
                    groupId: 'com.mt', 
                    nexusUrl: '54.196.123.233:8081',
                    nexusVersion: 'nexus3', 
                    protocol: 'http', 
                    repository: "${nexusRepo}", 
                    version: "${readPomVersion.version}"
                }
            }
        }
        stage('Docker Image Build'){
            steps{
                script{
                    sh 'docker image build -t $JOB_NAME:v1.$BUILD_ID .'
                    sh 'docker image tag $JOB_NAME:v1.$BUILD_ID tcindockerhub2025/$JOB_NAME:v1.$BUILD_ID'
                    sh 'docker image tag $JOB_NAME:v1.$BUILD_ID tcindockerhub2025/$JOB_NAME:latest'
                }
            }
        }

    }
}